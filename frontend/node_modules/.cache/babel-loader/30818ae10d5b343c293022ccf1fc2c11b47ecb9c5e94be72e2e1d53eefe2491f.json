{"ast":null,"code":"const auction = {\n  currentAuction: null,\n  createAuction: (tokenId, endTime) => {\n    if (!tokenId || !endTime) throw new Error(\"Token ID and End Time are required.\");\n    if (new Date(endTime).getTime() <= Date.now()) throw new Error(\"End time must be in the future.\");\n    auction.currentAuction = {\n      tokenId,\n      endTime: new Date(endTime).getTime(),\n      highestBid: null,\n      bids: [],\n      isClosed: false\n    };\n    return auction.currentAuction;\n  },\n  placeBid: (walletAddress, bidAmount) => {\n    if (!auction.currentAuction) throw new Error(\"No active auction.\");\n    if (auction.currentAuction.isClosed) throw new Error(\"The auction is closed.\");\n    if (Date.now() > auction.currentAuction.endTime) throw new Error(\"The auction has ended.\");\n    if (!walletAddress || bidAmount <= 0) throw new Error(\"Invalid bid details.\");\n    const {\n      highestBid,\n      bids\n    } = auction.currentAuction;\n    if (highestBid && bidAmount <= highestBid.amount) {\n      throw new Error(\"Bid must be higher than the current highest bid.\");\n    }\n    const newBid = {\n      walletAddress,\n      amount: bidAmount,\n      time: Date.now()\n    };\n    auction.currentAuction.bids.push(newBid);\n    auction.currentAuction.highestBid = newBid;\n    return {\n      message: \"Bid placed successfully!\",\n      highestBid: newBid\n    };\n  },\n  closeAuction: () => {\n    if (!auction.currentAuction) throw new Error(\"No active auction to close.\");\n    if (auction.currentAuction.isClosed) throw new Error(\"Auction is already closed.\");\n    if (Date.now() < auction.currentAuction.endTime) throw new Error(\"Auction cannot be closed before its end time.\");\n    auction.currentAuction.isClosed = true;\n    const winner = auction.currentAuction.highestBid ? {\n      walletAddress: auction.currentAuction.highestBid.walletAddress,\n      amount: auction.currentAuction.highestBid.amount\n    } : null;\n    return {\n      message: \"Auction closed.\",\n      winner\n    };\n  }\n};\nexport default auction;","map":{"version":3,"names":["auction","currentAuction","createAuction","tokenId","endTime","Error","Date","getTime","now","highestBid","bids","isClosed","placeBid","walletAddress","bidAmount","amount","newBid","time","push","message","closeAuction","winner"],"sources":["C:/Picnic/DES484-NFT-Auction/frontend/src/utils/auction.js"],"sourcesContent":["const auction = {\r\n    currentAuction: null,\r\n  \r\n    createAuction: (tokenId, endTime) => {\r\n      if (!tokenId || !endTime) throw new Error(\"Token ID and End Time are required.\");\r\n      if (new Date(endTime).getTime() <= Date.now()) throw new Error(\"End time must be in the future.\");\r\n  \r\n      auction.currentAuction = {\r\n        tokenId,\r\n        endTime: new Date(endTime).getTime(),\r\n        highestBid: null,\r\n        bids: [],\r\n        isClosed: false,\r\n      };\r\n      return auction.currentAuction;\r\n    },\r\n  \r\n    placeBid: (walletAddress, bidAmount) => {\r\n      if (!auction.currentAuction) throw new Error(\"No active auction.\");\r\n      if (auction.currentAuction.isClosed) throw new Error(\"The auction is closed.\");\r\n      if (Date.now() > auction.currentAuction.endTime) throw new Error(\"The auction has ended.\");\r\n      if (!walletAddress || bidAmount <= 0) throw new Error(\"Invalid bid details.\");\r\n  \r\n      const { highestBid, bids } = auction.currentAuction;\r\n  \r\n      if (highestBid && bidAmount <= highestBid.amount) {\r\n        throw new Error(\"Bid must be higher than the current highest bid.\");\r\n      }\r\n  \r\n      const newBid = { walletAddress, amount: bidAmount, time: Date.now() };\r\n      auction.currentAuction.bids.push(newBid);\r\n      auction.currentAuction.highestBid = newBid;\r\n  \r\n      return { message: \"Bid placed successfully!\", highestBid: newBid };\r\n    },\r\n  \r\n    closeAuction: () => {\r\n      if (!auction.currentAuction) throw new Error(\"No active auction to close.\");\r\n      if (auction.currentAuction.isClosed) throw new Error(\"Auction is already closed.\");\r\n      if (Date.now() < auction.currentAuction.endTime) throw new Error(\"Auction cannot be closed before its end time.\");\r\n  \r\n      auction.currentAuction.isClosed = true;\r\n  \r\n      const winner = auction.currentAuction.highestBid\r\n        ? { walletAddress: auction.currentAuction.highestBid.walletAddress, amount: auction.currentAuction.highestBid.amount }\r\n        : null;\r\n  \r\n      return { message: \"Auction closed.\", winner };\r\n    },\r\n  };\r\n  \r\n  export default auction;\r\n  "],"mappings":"AAAA,MAAMA,OAAO,GAAG;EACZC,cAAc,EAAE,IAAI;EAEpBC,aAAa,EAAEA,CAACC,OAAO,EAAEC,OAAO,KAAK;IACnC,IAAI,CAACD,OAAO,IAAI,CAACC,OAAO,EAAE,MAAM,IAAIC,KAAK,CAAC,qCAAqC,CAAC;IAChF,IAAI,IAAIC,IAAI,CAACF,OAAO,CAAC,CAACG,OAAO,CAAC,CAAC,IAAID,IAAI,CAACE,GAAG,CAAC,CAAC,EAAE,MAAM,IAAIH,KAAK,CAAC,iCAAiC,CAAC;IAEjGL,OAAO,CAACC,cAAc,GAAG;MACvBE,OAAO;MACPC,OAAO,EAAE,IAAIE,IAAI,CAACF,OAAO,CAAC,CAACG,OAAO,CAAC,CAAC;MACpCE,UAAU,EAAE,IAAI;MAChBC,IAAI,EAAE,EAAE;MACRC,QAAQ,EAAE;IACZ,CAAC;IACD,OAAOX,OAAO,CAACC,cAAc;EAC/B,CAAC;EAEDW,QAAQ,EAAEA,CAACC,aAAa,EAAEC,SAAS,KAAK;IACtC,IAAI,CAACd,OAAO,CAACC,cAAc,EAAE,MAAM,IAAII,KAAK,CAAC,oBAAoB,CAAC;IAClE,IAAIL,OAAO,CAACC,cAAc,CAACU,QAAQ,EAAE,MAAM,IAAIN,KAAK,CAAC,wBAAwB,CAAC;IAC9E,IAAIC,IAAI,CAACE,GAAG,CAAC,CAAC,GAAGR,OAAO,CAACC,cAAc,CAACG,OAAO,EAAE,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC1F,IAAI,CAACQ,aAAa,IAAIC,SAAS,IAAI,CAAC,EAAE,MAAM,IAAIT,KAAK,CAAC,sBAAsB,CAAC;IAE7E,MAAM;MAAEI,UAAU;MAAEC;IAAK,CAAC,GAAGV,OAAO,CAACC,cAAc;IAEnD,IAAIQ,UAAU,IAAIK,SAAS,IAAIL,UAAU,CAACM,MAAM,EAAE;MAChD,MAAM,IAAIV,KAAK,CAAC,kDAAkD,CAAC;IACrE;IAEA,MAAMW,MAAM,GAAG;MAAEH,aAAa;MAAEE,MAAM,EAAED,SAAS;MAAEG,IAAI,EAAEX,IAAI,CAACE,GAAG,CAAC;IAAE,CAAC;IACrER,OAAO,CAACC,cAAc,CAACS,IAAI,CAACQ,IAAI,CAACF,MAAM,CAAC;IACxChB,OAAO,CAACC,cAAc,CAACQ,UAAU,GAAGO,MAAM;IAE1C,OAAO;MAAEG,OAAO,EAAE,0BAA0B;MAAEV,UAAU,EAAEO;IAAO,CAAC;EACpE,CAAC;EAEDI,YAAY,EAAEA,CAAA,KAAM;IAClB,IAAI,CAACpB,OAAO,CAACC,cAAc,EAAE,MAAM,IAAII,KAAK,CAAC,6BAA6B,CAAC;IAC3E,IAAIL,OAAO,CAACC,cAAc,CAACU,QAAQ,EAAE,MAAM,IAAIN,KAAK,CAAC,4BAA4B,CAAC;IAClF,IAAIC,IAAI,CAACE,GAAG,CAAC,CAAC,GAAGR,OAAO,CAACC,cAAc,CAACG,OAAO,EAAE,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;IAEjHL,OAAO,CAACC,cAAc,CAACU,QAAQ,GAAG,IAAI;IAEtC,MAAMU,MAAM,GAAGrB,OAAO,CAACC,cAAc,CAACQ,UAAU,GAC5C;MAAEI,aAAa,EAAEb,OAAO,CAACC,cAAc,CAACQ,UAAU,CAACI,aAAa;MAAEE,MAAM,EAAEf,OAAO,CAACC,cAAc,CAACQ,UAAU,CAACM;IAAO,CAAC,GACpH,IAAI;IAER,OAAO;MAAEI,OAAO,EAAE,iBAAiB;MAAEE;IAAO,CAAC;EAC/C;AACF,CAAC;AAED,eAAerB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}